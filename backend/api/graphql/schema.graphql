"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A datetime string in ISO 8601 format in UTC with nanoseconds `YYYY-MM-DDTHH:mm:ss.SSSSSSZ`, e.g. `2020-04-20T16:20:04.000000Z`."
scalar DateTimeUtc @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeUtc")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Mutation {
  # BookingProvider

  createBookingProvider(
    input: CreateBookingProviderInput!
  ): BookingProvider! @guard(with: ["cognito"])

  updateBookingProvider(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    input: UpdateBookingProviderInput!
  ): BookingProvider @guard(with: ["cognito"])

  deleteBookingProvider(
    id: ID! @rules(apply: ["required", "string", "uuid"])
  ): BookingProvider @guard(with: ["cognito"])

  deleteBookingProviderCoverImage(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    bookingProviderId: ID! @rules(apply: ["required", "string", "uuid"])
  ): Media @guard(with: ["cognito"])

  deleteBookingProviderGalleryImage(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    bookingProviderId: ID! @rules(apply: ["required", "string", "uuid"])
  ): Media @guard(with: ["cognito"])

  # Booking

  createBooking(
    input: CreateBookingInput!
  ): Booking! @guard(with: ["cognito"])

  cancelBooking(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    input: CancelBookingInput!
  ): Booking @guard(with: ["cognito"])

  # Service

  deleteService(
    id: ID! @rules(apply: ["required", "string", "uuid"])
  ): Service @guard(with: ["cognito"])

  createService(
    input: CreateServiceInput!
  ): Service! @guard(with: ["cognito"])

  updateService(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    input: UpdateServiceInput!
  ): Service @guard(with: ["cognito"])

  # Weekday Schedule

  updateWeekdaySchedule(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    input: UpdateWeekdayScheduleInput!
  ): WeekdaySchedule @guard(with: ["cognito"])

  # Service Schedule

  createServiceSchedule(
    input: CreateServiceScheduleInput!
  ): ServiceSchedule! @guard(with: ["cognito"])

  updateServiceSchedule(
    id: ID! @rules(apply: ["required", "string", "uuid"])
    input: UpdateServiceScheduleInput!
  ): ServiceSchedule @guard(with: ["cognito"])

  deleteServiceSchedule(
    id: ID! @rules(apply: ["required", "string", "uuid"])
  ): ServiceSchedule @guard(with: ["cognito"])
}

input CreateServiceScheduleInput {
  serviceId: ID!
  weekdayScheduleId: ID!
  isActive: Boolean!
  openTime: Int!
  closeTime: Int!
  maxBookings: Int!
  timeSpan: Int!
}

input UpdateServiceScheduleInput {
  isActive: Boolean!
  openTime: Int!
  closeTime: Int!
  maxBookings: Int!
  timeSpan: Int!
}

input UpdateWeekdayScheduleInput {
  isActive: Boolean!
  openTime: Int!
  closeTime: Int!
}

input CreateServiceInput {
  name: String!
  description: String
  bookingProviderId: ID!
}

input UpdateServiceInput {
  name: String!
  description: String
}

input CreateBookingInput {
  date: Date!
  timeSlot: Int!
  serviceScheduleId: ID!
}

input CancelBookingInput {
  cancellationReason: String!
}

input CreateBookingProviderInput {
  isActive: Boolean!
  name: String!
  email: String!
  phone: String!
  website: String
  address: String!
  aboutUs: String!
  categoryId: ID!
}

input UpdateBookingProviderInput {
  isActive: Boolean!
  name: String!
  email: String!
  phone: String!
  website: String
  address: String!
  aboutUs: String!
}

type Query {
  me: User @auth(guards: ["cognito"])

  categories: [Category!]! @all

  randomCategories(limit: Int! = 4): [Category!]! @all(builder: "App\\GraphQL\\Queries\\RandomCategories")

  serviceDatepicker(
    serviceId: ID! @rules(apply: ["uuid"])
    date: Date!
  ): [ServiceDatepicker!]! @field(resolver: "App\\GraphQL\\Queries\\ServiceDatepicker")

  services: [Service!]! @paginate(defaultCount: 10)

  service(
    id: ID! @eq @rules(apply: ["uuid"])
  ): Service @find

  serviceSchedule(
    id: ID! @eq @rules(apply: ["uuid"])
  ): ServiceSchedule @find

  weekdaySchedule(
    id: ID! @eq @rules(apply: ["uuid"])
  ): WeekdaySchedule @find

  bookingProviders(
    categories: [ID!]
    address: String
    name: String
    date: Date @rules(apply: ["date", "after_or_equal:today"])
  ): [BookingProvider!]! @paginate(defaultCount: 10, builder: "App\\GraphQL\\Queries\\BookingProviders")

  bookingProvider(
    id: ID! @eq @rules(apply: ["uuid"])
  ): BookingProvider @find

  randomBookingProviders(limit: Int! = 4): [BookingProvider!]! @all(builder: "App\\GraphQL\\Queries\\RandomBookingProvider")

  bookings(
    bookingProviderId: ID! @rules(apply: ["required", "string", "uuid"])
  ): [Booking!]! @guard(with: ["cognito"])
}

type Media {
  id: ID!
  baseName: String! @rename(attribute: "basename")
  fullUrl: String! @method(name: "getUrl")
  fileSize: Int! @rename(attribute: "size")
}

type BookedTimeSlot {
  timeSlot: Int
  currentBookings: Int
}

type ServiceDatepicker  {
  serviceSchedule: ServiceSchedule!
  bookedTimeSlots: [BookedTimeSlot!]!
}

type Booking {
  id: ID!
  date: Date!
  timeSlot: Int! @rename(attribute: "time_slot")
  cancellationReason: String @rename(attribute: "cancellation_reason")
  cancelledAt: DateTimeUtc @rename(attribute: "cancelled_at")
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  user: User! @belongsTo(relation: "user")
  serviceSchedule: ServiceSchedule! @belongsTo(relation: "serviceSchedule")
}

type User {
  id: ID!
  name: String!
  email: String!
  isVerified: Boolean! @rename(attribute: "is_verified")
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  bookingProviders: [BookingProvider!]! @hasMany(relation: "bookingProviders")
  bookings: [Booking!]! @hasMany(relation: "bookings")
}

type WeekdaySchedule {
  id: ID!
  weekday: Int! @rename(attribute: "weekday_id")
  isActive: Boolean! @rename(attribute: "is_active")
  openTime: Int! @rename(attribute: "open_time")
  closeTime: Int! @rename(attribute: "close_time")
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  bookingProvider: BookingProvider! @belongsTo(relation: "bookingProvider")
  serviceSchedules: [ServiceSchedule!]! @hasMany(relation: "serviceSchedules")
}

type ServiceSchedule {
  id: ID!
  isActive: Boolean! @rename(attribute: "is_active")
  openTime: Int! @rename(attribute: "open_time")
  closeTime: Int! @rename(attribute: "close_time")
  maxBookings: Int! @rename(attribute: "max_bookings")
  timeSpan: Int! @rename(attribute: "time_span")
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  service: Service! @belongsTo(relation: "service")
  weekdaySchedule: WeekdaySchedule! @belongsTo(relation: "weekdaySchedule")
}

type BookingProvider {
  id: ID!
  name: String!
  email: String!
  phone: String!
  website: String
  address: String!
  aboutUs: String! @rename(attribute: "about_us")
  isActive: Boolean! @rename(attribute: "is_active")
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  user: User! @belongsTo(relation: "user")
  category: Category! @belongsTo(relation: "category")
  services: [Service!]! @hasMany(relation: "services")
  weekdaySchedules: [WeekdaySchedule!]! @hasMany(relation: "weekdaySchedules")
  galleryImages: [Media] @field(resolver: "App\\GraphQL\\Resolvers\\BookingProvider@galleryImages")
  coverImage: Media @field(resolver: "App\\GraphQL\\Resolvers\\BookingProvider@coverImage")
}

type Service {
  id: ID!
  name: String!
  description: String
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  bookingProvider: BookingProvider! @belongsTo(relation: "bookingProvider")
}

type Category {
  id: ID!
  name: String!
  description: String
  createdAt: DateTimeUtc! @rename(attribute: "created_at")
  updatedAt: DateTimeUtc! @rename(attribute: "updated_at")
  bookingProviders: [BookingProvider!]! @hasMany(relation: "bookingProviders")
}
