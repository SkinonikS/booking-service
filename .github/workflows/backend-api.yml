name: Backend API

on:
  push:
    branches:
      - main
    paths: 
      - backend/api/**
  pull_request:
    branches:
      - main
    paths: 
      - backend/api/**

jobs:
  tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, bcmath, zip, gmp
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
      - name: Run tests
        run: ./vendor/bin/pest --ci

  build:
    runs-on: ubuntu-latest
    needs: [tests]
    defaults:
      run:
        working-directory: backend/api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Create env
        run: |
          cp .env.example .env
      
      - name: Create deployment package
        run: |
          zip -r deploy.zip . \
          -x "vendor/*" \
          -x "tests/*" \
          -x "phpunit.xml" \
          -x "README.md" \
          -x "docker-compose.yml" \
          -x ".env.example" \
          -x ".editorconfig"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        id: upload
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          S3_KEY="laravel-app-${TIMESTAMP}.zip"
          aws s3 cp deploy.zip s3://${{ vars.EB_PRODUCTION_S3_BUCKET_NAME }}/${S3_KEY}
          echo "s3_key=${S3_KEY}" >> $GITHUB_OUTPUT
        
      - name: Create new EB application version
        id: create-app-version
        run: |
          VERSION_LABEL="v-${GITHUB_SHA::8}-$(date +%Y%m%d%H%M%S)"
          aws elasticbeanstalk create-application-version \
            --application-name ${{ vars.EB_PRODUCTION_APP_NAME }} \
            --version-label ${VERSION_LABEL} \
            --source-bundle S3Bucket="${{ vars.EB_PRODUCTION_S3_BUCKET_NAME }}",S3Key="${{ steps.upload.outputs.s3_key }}" \
            --description "Deployed from GitHub Actions workflow"
          echo "version=${VERSION_LABEL}" >> $GITHUB_OUTPUT
        
      - name: Update version EB version label
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ vars.EB_PRODUCTION_ENV_NAME }} \
            --version-label ${{ steps.create-app-version.outputs.version }}
